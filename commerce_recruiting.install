<?php

/**
 * @file
 * Contains update functions for Commerce Recruiting.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\link\LinkItemInterface;
use Drupal\commerce_recruiting\Entity\Campaign;

/**
 * Add the 'redirect' field to campaign option entities.
 */
function commerce_recruiting_update_8001() {
  $link_field_definition = BaseFieldDefinition::create('link')
    ->setLabel(t('Redirect'))
    ->setDescription(t("Page to redirect to, when using this code's link. Leave empty to go to the product page."))
    ->setTranslatable(TRUE)
    ->setSettings([
      'link_type' => LinkItemInterface::LINK_GENERIC,
      'title' => DRUPAL_DISABLED,
    ])
    ->setDisplayOptions('form', [
      'type' => 'link',
      'weight' => 3,
    ])
    ->setDisplayConfigurable('form', TRUE);

  $update_manager = \Drupal::entityDefinitionUpdateManager();
  $update_manager->installFieldStorageDefinition('redirect', 'commerce_recruitment_camp_option', 'commerce_recruiting', $link_field_definition);
}

/**
 * Add the 'auto_re_recruit' field to campaign entities.
 */
function commerce_recruiting_update_8002() {
  $field_definition = BaseFieldDefinition::create('boolean')
    ->setName('auto_re_recruit')
    ->setLabel(t('Auto re-recruit'))
    ->setDescription(t('This will create subsequent recruitments each time the customer orders one of the products below, if they have been recruited once before.'))
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'boolean_checkbox',
      'weight' => 2,
    ]);

  $update_manager = \Drupal::entityDefinitionUpdateManager();
  $update_manager->installFieldStorageDefinition('auto_re_recruit', 'commerce_recruitment_campaign', 'commerce_recruiting', $field_definition);
}

/**
 * Add new fields to campaign entities.
 *
 * - recruitment_bonus_resolver
 * - bonus_any_option
 * - bonus_quantity_multiplication.
 */
function commerce_recruiting_update_8003() {
  $bonus_any_option = BaseFieldDefinition::create('boolean')
    ->setName('bonus_any_option')
    ->setLabel(t('Apply bonus from any matching option'))
    ->setDescription(t('The recruiter can receive the bonus from any option of this campaign if bought by the customer. If this option is off, the recruiter can only receive the bonus of the product from the recruitment link.'))
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'boolean_checkbox',
      'weight' => 2,
    ]);

  $bonus_quantity_multiplication = BaseFieldDefinition::create('boolean')
    ->setName('bonus_quantity_multiplication')
    ->setLabel(t('Multiply the bonus by quantity in order'))
    ->setDescription(t('The bonus will be multiplied by the quantity of the product in the order. If this option is off, the bonus will be applied only once.'))
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'boolean_checkbox',
      'weight' => 2,
    ]);

  $recruitment_bonus_resolver = BaseFieldDefinition::create('commerce_plugin_item:commerce_recruiting_bonus_resolver')
    ->setLabel(t('Recruitment bonus resolver'))
    ->setCardinality(1)
    ->setRequired(TRUE)
    ->setSetting('allowed_values_function', [Campaign::class, 'getBonusResolverOptions'])
    ->setDisplayOptions('form', [
      'type' => 'commerce_plugin_select',
      'weight' => 1,
    ]);

  $update_manager = \Drupal::entityDefinitionUpdateManager();
  $update_manager->installFieldStorageDefinition('bonus_any_option', 'commerce_recruitment_campaign', 'commerce_recruiting', $bonus_any_option);
  $update_manager->installFieldStorageDefinition('bonus_quantity_multiplication', 'commerce_recruitment_campaign', 'commerce_recruiting', $bonus_quantity_multiplication);
  $update_manager->installFieldStorageDefinition('recruitment_bonus_resolver', 'commerce_recruitment_campaign', 'commerce_recruiting', $recruitment_bonus_resolver);
}
